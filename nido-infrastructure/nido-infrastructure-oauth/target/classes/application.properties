# Nombre de la servicio.
spring.application.name=svc-oauth
server.servlet.context-path=/auth-api
#server.port=${PORT:0}
server.port=9001


# Instancia de forma random nombre de la aplicaci�n mas un nombre y valor random.
# Configuraci�n para servicios que se quieren escalar de forma autom�tica para el balanceo de cargas.
eureka.instance.instance-id=${spring.application.name}:  ${spring.application.instance_id:${random.value}}

# Indico la direcci�n f�sica de Eureka para la comunicaci�n.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# eureka.instance.metadataMap.management.context-path=/svc-actuator/actuator
# management.endpoints.web.exposure.include=*


# eureka.client.healthcheck.enabled: true

# https://medium.com/swlh/stateless-jwt-authentication-with-spring-boot-a-better-approach-1f5dbae6c30f
# https://www.baeldung.com/spring-security-oauth2-jws-jwk
# Repositorio del articulo anterior
# https://github.com/Baeldung/spring-security-oauth/tree/master/oauth-jws-jwk-legacy/oauth-authorization-server-jws-jwk-legacy/src/main/java/com/baeldung

# Cargar las claves desde el almacén de claves.

security.jwt.key-store=classpath:/keystore.jks
security.jwt.key-store-password=letmein
security.jwt.key-pair-alias=mytestkey
security.jwt.key-pair-password=changeme
## Especifican la ubicación del almacén de claves.
#app.security.jwt.keystore-location=keys/keystore.jks
## Contraseña del almacén de claves.
#app.security.jwt.keystore-password=72NCJ3jwFsEm%UARbAufJYVEh#&bpsy9jORd%Qw%bfxzIQPYUz
## Alias de la clave de firma JWT.
#app.security.jwt.key-alias=jwtNido
#app.security.jwt.private-key-passphrase=72NCJ3jwFsEm%UARbAufJYVEh#&bpsy9jORd%Qw%bfxzIQPYUz

spring.jackson.serialization.INDENT_OUTPUT=true

logging.level.org.springframework.security=DEBUG

####### SPRING JPA ############
spring.jpa.database=POSTGRESQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect
## JPA/Hibernate
# Se utiliza para registrar y volcar consultas SQL en la salida estándar.
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
# Hibernate ddl auto (create, create-drop, validate, update, none (para usar archivos de creacion))
spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.nom_contextual_creation=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
####### SPRING JPA ############

####### POSTGRES ############
# Driver controlador de la BBDD
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/rotura
# Usuario con permisos de acceso y escritura.
spring.datasource.username=postgres
# Contraseña del usuario.
spring.datasource.password=Caramelo
####### POSTGRES ############

spring.datasource.initialization-mode=always
spring.datasource.initialize=true
spring.datasource.schema=classpath:/schema.sql
spring.datasource.data=classpath:/data.sql
spring.datasource.continue-on-error=true
spring.datasource.tomcat.testWhileIdle=true
spring.datasource.tomcat.timeBetweenEvictionRunsMillis=60000
spring.datasource.tomcat.validationQuery=SELECT 1
spring.datasource.platform=postgres

spring.main.banner-mode=off
logging.level.org.hibernate.SQL=debug
logging.level.org.springframework=ERROR

#desavilita la seguridad de los putnos finales no valido para produccion
#management.security.enabled = false