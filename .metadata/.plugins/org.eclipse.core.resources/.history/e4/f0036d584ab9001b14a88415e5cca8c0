server.port=9999
server.servlet.context-path=/gateway-api
spring.application.name=gateway-server

# Enturado del microservicio users.
spring.cloud.gateway.routes[0].id=auth-server
spring.cloud.gateway.routes[0].uri=lb://auth-api
spring.cloud.gateway.routes[0].predicates=Path=/api-v1/*
spring.cloud.gateway.routes[0].filters=StripPrefix=1
 
spring.cloud.gateway.routes[1].id=resource-server
spring.cloud.gateway.routes[1].uri=lb://resource-api
spring.cloud.gateway.routes[1].predicates=Path=/api-v1/*
spring.cloud.gateway.routes[1].filters=StripPrefix=1

#################################
######## --- EUREKA --- #########
#################################
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
# Permite gestionar el estado devuelto el microservicio
eureka.client.healthcheck.enabled=true

# Define el path del endpoint de estado, sirven para que otros microservicios puedan recuperar el estado del microservicio
eureka.instance.statusPageUrlPath=/my_info
# Define el path del endpoint de información, sirven para que otros microservicios puedan recuperar el estado del microservicio
eureka.instance.healthCheckUrlPath=/my_health
# Otro nombre del host
eureka.instance.virtual-host-name=www.nido.com/

# Aunque este está habilitado por defecto en Eureka, es necesaria esta configuracion para http para que se trabaje con la conexión segura.
eureka.instance.nonSecurePortEnabled=false
# Esto hará que Eureka publique la información de la instancia mostrando preferencia por la conexión segura
eureka.instance.securePortEnabled=true
# Permite registrar microservicios sin ponerlos inmediatamente disponibles utilizando los diferentes estados
eureka.instance.initialStatus=UNKNOWN

# Permite proporcionar información adicional como metadatos.
# Dueno de la aplicacion 
eureka.instance.metadataMap.appOwner=Nido
eureka.instance.metadataMap.description=gateway server

eureka.instance.preferIpAddress=true
eureka.instance.lease-expiration-duration-in-seconds=1
eureka.instance.lease-renewal-interval-in-seconds=2
#################################
######## --- EUREKA --- #########
#################################




# registros para poder rastrear el proceso de la puerta de enlace correctamente,
# habilitar el registro de depuración y ver qué falla.
#logging.level.root=WARN
#logging.level.org.springframework.web=INFO
#logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.security.oauth2=DEBUG



#management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure=*
#management.endpoints.web.expose=*


#eureka.instance.preferIpAddress=true
#eureka.instance.lease-expiration-duration-in-seconds=1
#eureka.instance.lease-renewal-interval-in-seconds=2
# Habilitam la busca automáticamente del enrutamiento de llamadas en Eureka.
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true
# https://stackoverflow.com/questions/52196909/spring-cloud-gateway-unable-to-resolve-service-id-from-eureka-server
spring.cloud.gateway.discovery.locator.lower-case-service-id= true

# ribbon Desabilito para que use loadBalance
#spring.cloud.loadbalancer.ribbon.enabled=false


# Timeout para que la comunicaci�n entre microsercicions aouht usuario no de error
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 20000
ribbon.eager-load.enabled= true
ribbon.ConnectTimeout: 3000
ribbon.ReadTimeout: 60000


#
## Para la gesti�n de las trazas
## Indica que se exportaran todas las trazas no solo el 10%
#spring.sleuth.sampler.probability=1.0
#
## Ruta del servidor ZipKin
#spring.zipkin.baseUrl=http://localhost:9411/
#
## Envia las trazas a Rabbit
#spring.zipkin.sender.type=rabbit


