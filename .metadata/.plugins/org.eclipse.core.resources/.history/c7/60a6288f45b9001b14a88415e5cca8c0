spring.application.name=svc-gateway
server.servlet.context-path=/gateway-api

# Puerto del microservicio. Puerto de forma autom�tica.
server.port=9999
# Genera un numero de puerto de forma aleatoria.
# server.port=${PORT:0}


# Enturado del microservicio users.
spring.cloud.gateway.routes[0].id=auth-server
spring.cloud.gateway.routes[0].uri=lb://auth-api
spring.cloud.gateway.routes[0].predicates=Path=/api-v1/*
spring.cloud.gateway.routes[0].filters=StripPrefix=1
 
spring.cloud.gateway.routes[1].id=resource-server
spring.cloud.gateway.routes[1].uri=lb://resource-api
spring.cloud.gateway.routes[1].predicates=Path=/api-v1/*
spring.cloud.gateway.routes[1].filters=StripPrefix=1


#eureka.instance.preferIpAddress=true
#eureka.instance.lease-expiration-duration-in-seconds=1
#eureka.instance.lease-renewal-interval-in-seconds=2
# Habilitam la busca automáticamente del enrutamiento de llamadas en Eureka.
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true
# https://stackoverflow.com/questions/52196909/spring-cloud-gateway-unable-to-resolve-service-id-from-eureka-server
spring.cloud.gateway.discovery.locator.lower-case-service-id= true

# ribbon Desabilito para que use loadBalance
#spring.cloud.loadbalancer.ribbon.enabled=false

#spring.cloud.gateway.routes[0].id=svc-admin
#spring.cloud.gateway.routes[0].uri=lb://svc-admin
#spring.cloud.gateway.routes[0].predicates=Path=/api/admin/**
## spring.cloud.gateway.routes[0].filters=StripPrefix=2
#
#spring.cloud.gateway.routes[1].id=svc-actuator
#spring.cloud.gateway.routes[1].uri=lb://svc-actuator
#spring.cloud.gateway.routes[1].predicates=Path=/api/actuator/**
## spring.cloud.gateway.routes[1].filters=StripPrefix=2

#spring.cloud.gateway.routes[2].id=svc-oauth
#spring.cloud.gateway.routes[2].uri=lb://svc-oauth
#spring.cloud.gateway.routes[2].predicates=Path=/api/oauth/**
## spring.cloud.gateway.routes[1].filters=StripPrefix=2
#
#spring.cloud.gateway.routes[3].id=svc-users
#spring.cloud.gateway.routes[3].uri=lb://svc-users
#spring.cloud.gateway.routes[3].predicates=Path=/api/users/**
## spring.cloud.gateway.routes[2].filters=StripPrefix=2

# Enturado del microservicio oauth..
# Agrega una ruta base con un prefijo para todas las rutas del microservicio.
# spring.cloud.gateway.routes[0].id=svc-oauth
# lb:// Para el balanceo de carga
# spring.cloud.gateway.routes[0].uri=lb://svc-oauth
# spring.cloud.gateway.routes[0].predicates=Path=/api/oauth/**
# filters=StripPrefix=2 Para indicar que parametros se tienen que borrar al momento de realizar la llamada
# /api/alumnos/ dos prefijos
# spring.cloud.gateway.routes[0].filters=StripPrefix=2


# Enturado del microservicio users.
# spring.cloud.gateway.routes[1].id=svc-users
# spring.cloud.gateway.routes[1].uri=lb://svc-users
# spring.cloud.gateway.routes[1].predicates=Path=/api/users/**
# spring.cloud.gateway.routes[1].filters=StripPrefix=2
# spring.cloud.gateway.routes[1].filters=RewritePath=/api/users/(?<path>.*), /$\{path}

# ribbon Desabilito para que use loadBalance
spring.cloud.loadbalancer.ribbon.enabled=false

#################################
######## --- EUREKA --- #########
#################################
# Instancia de forma random nombre de la aplicacion mas un nombre y valor random.
# Configuraci�n para servicios que se quieren escalar de forma autom�tica para el balanceo de cargas.
eureka.instance.instance-id=${spring.application.name}:  ${spring.application.instance_id:${random.value}}

# Indico la direcci�n f�sica de Eureka para la comunicaci�n.
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
# Permite gestionar el estado devuelto el microservicio
eureka.client.healthcheck.enabled=true

# Define el path del endpoint de estado, sirven para que otros microservicios puedan recuperar el estado del microservicio
eureka.instance.statusPageUrlPath=/my_info
# Define el path del endpoint de información, sirven para que otros microservicios puedan recuperar el estado del microservicio
eureka.instance.healthCheckUrlPath=/my_health
# Otro nombre del host
eureka.instance.virtual-host-name=www.nido.com/

# Aunque este está habilitado por defecto en Eureka, es necesaria esta configuracion para http para que se trabaje con la conexión segura.
eureka.instance.nonSecurePortEnabled=false
# Esto hará que Eureka publique la información de la instancia mostrando preferencia por la conexión segura
eureka.instance.securePortEnabled=true
# Permite registrar microservicios sin ponerlos inmediatamente disponibles utilizando los diferentes estados
eureka.instance.initialStatus=UNKNOWN

# Permite proporcionar información adicional como metadatos.
# Dueno de la aplicacion 
eureka.instance.metadataMap.appOwner=Nido
eureka.instance.metadataMap.description=gateway server

eureka.instance.preferIpAddress=true
eureka.instance.lease-expiration-duration-in-seconds=1
eureka.instance.lease-renewal-interval-in-seconds=2
#################################
######## --- EUREKA --- #########
#################################




# registros para poder rastrear el proceso de la puerta de enlace correctamente,
# habilitar el registro de depuración y ver qué falla.
#logging.level.root=WARN
#logging.level.org.springframework.web=INFO
#logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.security.oauth2=DEBUG



#management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure=*
#management.endpoints.web.expose=*




# Timeout para que la comunicaci�n entre microsercicions aouht usuario no de error
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 20000
ribbon.eager-load.enabled= true
ribbon.ConnectTimeout: 3000
ribbon.ReadTimeout: 60000


#
## Para la gesti�n de las trazas
## Indica que se exportaran todas las trazas no solo el 10%
#spring.sleuth.sampler.probability=1.0
#
## Ruta del servidor ZipKin
#spring.zipkin.baseUrl=http://localhost:9411/
#
## Envia las trazas a Rabbit
#spring.zipkin.sender.type=rabbit




# Para la gesti�n de las trazas
# Indica que se exportaran todas las trazas no solo el 10%
spring.sleuth.sampler.probability=1.0

# Ruta del servidor ZipKin
spring.zipkin.baseUrl=http://localhost:9411/

# Envia las trazas a Rabbit
spring.zipkin.sender.type=rabbit
